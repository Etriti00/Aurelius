generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions", "fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [pgvector(map: "vector"), pg_trgm]
}

model User {
  id              String   @id @default(cuid())
  email           String   @unique
  name            String?
  avatar          String?
  
  // OAuth providers
  googleId        String?  @unique
  microsoftId     String?  @unique
  appleId         String?  @unique
  
  // Authentication
  emailVerified   DateTime?
  passwordHash    String?  @db.Text
  
  // Subscription & Usage
  subscription    Subscription?
  stripeCustomerId String?  @unique
  currentUsage    Usage?
  
  // Voice preferences
  voiceId         String   @default("rachel")
  voiceSpeed      Float    @default(1.0)
  voicePitch      Float    @default(1.0)
  preferredInput  String   @default("both") // text, voice, both
  voiceLanguage   String   @default("en-US")
  
  // Notification preferences
  emailNotifications    Boolean @default(true)
  pushNotifications     Boolean @default(true)
  smsNotifications      Boolean @default(false)
  notificationFrequency String  @default("instant") // instant, hourly, daily
  
  // Security & Authorization
  roles           String[] @default(["user"])
  mfaEnabled      Boolean  @default(false)
  mfaSecret       String?  @db.Text
  sessions        Session[]
  
  // Metadata
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  lastActiveAt    DateTime?
  deletedAt       DateTime?
  preferences     Json     @default("{}")
  timezone        String   @default("UTC")
  
  // Relations
  integrations    Integration[]
  tasks           Task[]
  events          CalendarEvent[]
  emails          Email[]
  embeddings      VectorEmbedding[]
  actionLogs      ActionLog[]
  usageHistory    UsageHistory[]
  notifications   Notification[]
  aiMemories      AIMemory[]
  workflows       Workflow[]
  workflowExecutions WorkflowExecution[]
  workflowTriggers WorkflowTrigger[]
  workflowTemplateUsages WorkflowTemplateUsage[]
  
  // PHASE 1.5: New Model Relations
  refreshTokens       RefreshToken[]
  auditLogs          AuditLog[]
  activityLogs       ActivityLog[]
  aiUsageLogs        AIUsageLog[]
  aiSuggestions      AISuggestion[]
  voiceInteractions  VoiceInteraction[]
  scheduledJobs      ScheduledJob[]
  emailThreads       EmailThread[]
  files              File[]
  
  @@index([email])
  @@index([stripeCustomerId])
  @@index([lastActiveAt])
  @@index([deletedAt])
}

model Session {
  id            String   @id @default(cuid())
  sessionToken  String   @unique
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userAgent     String?
  ipAddress     String?
  expires       DateTime
  createdAt     DateTime @default(now())
  
  @@index([userId])
  @@index([expires])
}

model Subscription {
  id                    String   @id @default(cuid())
  userId                String   @unique
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  tier                  Tier     @default(PRO)
  status                Status   @default(ACTIVE)
  
  // Stripe
  stripeCustomerId      String   @unique
  stripeSubscriptionId  String   @unique
  stripePriceId         String
  
  // Billing
  currentPeriodStart    DateTime
  currentPeriodEnd      DateTime
  cancelAtPeriodEnd     Boolean  @default(false)
  canceledAt            DateTime?
  
  // Limits based on tier
  monthlyActionLimit    Int      // 1000, 1500, or 2000
  integrationLimit      Int      // 10, 20, or unlimited (-1)
  aiModelAccess         String[] // ["claude-3-haiku", "claude-3.5-sonnet", etc]
  
  // Features
  voiceEnabled          Boolean  @default(true)
  advancedAnalytics     Boolean  @default(false)
  teamFeatures          Boolean  @default(false)
  customIntegrations    Boolean  @default(false)
  prioritySupport       Boolean  @default(false)
  
  // Pricing
  monthlyPrice          Float
  overageRate           Float    // 0.06, 0.066, or 0.10 per action
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  @@index([status, currentPeriodEnd])
  @@index([stripeSubscriptionId])
}

model Usage {
  id                    String   @id @default(cuid())
  userId                String   @unique
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Current period
  periodStart           DateTime
  periodEnd             DateTime
  
  // Action allocation & usage
  monthlyAllocation     Int
  actionsUsed           Int      @default(0)
  actionsRemaining      Int      // Computed: monthlyAllocation - actionsUsed
  overageActions        Int      @default(0)
  
  // Breakdown by type
  textActions           Int      @default(0)
  voiceActions          Int      @default(0)
  emailActions          Int      @default(0)
  calendarActions       Int      @default(0)
  workflowActions       Int      @default(0)
  integrationActions    Int      @default(0)
  aiAnalysisActions     Int      @default(0)
  
  // Model usage breakdown
  haikuActions          Int      @default(0)
  sonnetActions         Int      @default(0)
  opusActions           Int      @default(0)
  
  // Costs
  overageCost           Decimal  @db.Decimal(10, 2) @default(0)
  estimatedTotal        Decimal  @db.Decimal(10, 2) @default(0)
  
  // Performance metrics
  cacheHitRate          Float    @default(0)
  averageResponseTime   Int      @default(0) // milliseconds
  
  updatedAt             DateTime @updatedAt
  
  @@index([userId, periodStart])
  @@index([periodEnd])
}

model UsageHistory {
  id                String   @id @default(cuid())
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  periodStart       DateTime
  periodEnd         DateTime
  actionsAlloted    Int
  actionsUsed       Int
  overageActions    Int      @default(0)
  overageCost       Decimal  @db.Decimal(10, 2) @default(0)
  
  // Detailed breakdown
  breakdown         Json     // Detailed usage by type and model
  
  invoiceId         String?  // Stripe invoice ID
  paidAt            DateTime?
  
  createdAt         DateTime @default(now())
  
  @@unique([userId, periodStart])
  @@index([userId, periodEnd])
  @@index([invoiceId])
}

model ActionLog {
  id                String   @id @default(cuid())
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Action details
  type              String   // voice_command, text_command, email_draft, etc.
  subtype           String?
  category          String   // ai, integration, automation, etc.
  
  // Request/Response
  input             String?  @db.Text
  output            String?  @db.Text
  metadata          Json     @default("{}")
  
  // Cache info
  fromCache         Boolean  @default(false)
  cacheKey          String?
  cacheHit          Boolean  @default(false)
  
  // AI details
  model             String?  // claude-3-haiku, claude-3-5-sonnet, etc.
  promptTokens      Int?
  completionTokens  Int?
  totalTokens       Int?
  cost              Decimal? @db.Decimal(10, 6)
  
  // Performance
  duration          Int?     // milliseconds
  queueTime         Int?     // milliseconds
  processingTime    Int?     // milliseconds
  
  // Status & Error handling
  status            String   @default("success") // success, failed, partial, timeout
  error             String?  @db.Text
  retryCount        Int      @default(0)
  
  // Tracking
  sessionId         String?
  traceId           String?
  parentActionId    String?  // For tracking related actions
  
  createdAt         DateTime @default(now())
  
  @@index([userId, createdAt])
  @@index([type, createdAt])
  @@index([fromCache])
  @@index([status])
  @@index([sessionId])
  @@index([traceId])
}

model Integration {
  id                String   @id @default(cuid())
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  provider          String   // google-gmail, google-calendar, microsoft-teams, slack, etc.
  providerAccountId String?  // External account ID
  
  // Encrypted tokens
  accessToken       String   @db.Text
  refreshToken      String?  @db.Text
  tokenExpiry       DateTime?
  tokenType         String?  // Bearer, etc.
  
  // Integration status
  status            String   @default("active") // active, expired, error, disabled
  lastSyncAt        DateTime?
  nextSyncAt        DateTime?
  syncError         String?  @db.Text
  errorCount        Int      @default(0)
  
  // Permissions & Scopes
  scopes            String[]
  permissions       Json     @default("{}")
  
  // Metadata
  settings          Json     @default("{}")
  accountEmail      String?  // The email/account connected
  accountName       String?
  webhookUrl        String?
  webhookSecret     String?
  
  // Sync settings
  syncEnabled       Boolean  @default(true)
  syncFrequency     Int      @default(300) // seconds
  lastSyncedItemId  String?
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // PHASE 1.5: New Integration Relations
  syncStatistics    SyncStatistics?
  syncConflicts     SyncConflict[]
  
  @@unique([userId, provider])
  @@index([userId, status])
  @@index([provider, lastSyncAt])
  @@index([nextSyncAt])
}

model Task {
  id                String   @id @default(cuid())
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  title             String
  description       String?  @db.Text
  status            String   @default("pending") // pending, in_progress, completed, cancelled
  priority          String   @default("medium") // low, medium, high, urgent
  
  // Dates
  dueDate           DateTime?
  startDate         DateTime?
  completedAt       DateTime?
  
  // AI-generated fields
  aiSuggested       Boolean  @default(false)
  aiReason          String?  @db.Text
  aiConfidence      Float?   // 0-1 confidence score
  smartScheduled    Boolean  @default(false)
  
  // Organization
  labels            String[]
  projectId         String?
  project           Project? @relation(fields: [projectId], references: [id])
  parentId          String?  // For subtasks
  parentTask        Task?    @relation("TaskSubtasks", fields: [parentId], references: [id])
  subtasks          Task[]   @relation("TaskSubtasks")
  
  // Integration references
  externalId        String?  // ID in external system
  externalProvider  String?  // google-tasks, microsoft-todo, etc.
  
  // Metadata
  estimatedMinutes  Int?
  actualMinutes     Int?
  attachments       Json     @default("[]")
  
  // Recurrence
  isRecurring       Boolean  @default(false)
  recurrenceRule    String?  // RRULE format
  recurrenceEndDate DateTime?
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  deletedAt         DateTime?
  
  @@index([userId, status])
  @@index([userId, dueDate])
  @@index([projectId])
  @@index([externalProvider, externalId])
  @@index([deletedAt])
}

model Project {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  color       String   @default("#6366f1")
  icon        String?
  isArchived  Boolean  @default(false)
  
  tasks       Task[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([userId, name])
  @@index([userId, isArchived])
}

model CalendarEvent {
  id                String   @id @default(cuid())
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  title             String
  description       String?  @db.Text
  location          String?
  
  // Time
  startTime         DateTime
  endTime           DateTime
  allDay            Boolean  @default(false)
  timezone          String   @default("UTC")
  
  // Attendees
  attendees         Json     @default("[]") // Array of {email, name, status}
  organizer         String?
  
  // Status
  status            String   @default("confirmed") // confirmed, tentative, cancelled
  responseStatus    String   @default("accepted") // accepted, declined, tentative, needsAction
  
  // AI features
  aiGenerated       Boolean  @default(false)
  aiSuggestions     Json?    // Travel time, preparation tasks, etc.
  smartReminders    Json     @default("[]")
  
  // Integration
  externalId        String?
  externalProvider  String?  // google-calendar, outlook, etc.
  conferenceData    Json?    // Video meeting links
  
  // Recurrence
  isRecurring       Boolean  @default(false)
  recurrenceRule    String?
  recurringEventId  String?  // Parent recurring event
  
  // Metadata
  color             String?
  visibility        String   @default("default") // default, public, private
  reminders         Json     @default("[]")
  attachments       Json     @default("[]")
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  deletedAt         DateTime?
  
  @@index([userId, startTime])
  @@index([userId, endTime])
  @@index([externalProvider, externalId])
  @@index([deletedAt])
}

model Email {
  id                String   @id @default(cuid())
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Email data
  messageId         String?  @unique
  threadId          String?
  
  from              String
  to                String[]
  cc                String[]
  bcc               String[]
  subject           String
  body              String   @db.Text
  bodyHtml          String?  @db.Text
  
  // Status
  status            String   @default("draft") // draft, sent, received, archived
  isRead            Boolean  @default(false)
  isStarred         Boolean  @default(false)
  isImportant       Boolean  @default(false)
  
  // AI features
  aiDrafted         Boolean  @default(false)
  aiSummary         String?  @db.Text
  aiCategory        String?  // personal, work, promotional, etc.
  aiPriority        Int      @default(0) // 0-10
  sentiment         String?  // positive, negative, neutral
  
  // Metadata
  labels            String[]
  attachments       Json     @default("[]")
  headers           Json?
  
  // Integration
  externalId        String?
  externalProvider  String?
  
  // Relations
  emailThread       EmailThread? @relation(fields: [threadId], references: [id], onDelete: SetNull)
  
  // Timestamps
  sentAt            DateTime?
  receivedAt        DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  deletedAt         DateTime?
  
  @@index([userId, status])
  @@index([userId, receivedAt])
  @@index([threadId])
  @@index([externalProvider, externalId])
  @@index([deletedAt])
}

model VectorEmbedding {
  id                String   @id @default(cuid())
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  contentType       String   // email, task, document, voice_transcript, calendar_event
  contentId         String   // Reference to original content
  contentHash       String   // For deduplication
  
  // Vector embedding as JSON array (workaround for pgvector limitation)
  // In production, this would use proper pgvector extension
  embedding         Json // Array of numbers representing the vector
  
  // Original content preview
  content           String   @db.Text
  contentSummary    String?  @db.Text
  
  // Metadata for filtering
  metadata          Json
  tags              String[]
  
  // Embedding model info
  model             String   // text-embedding-3-small, claude-3-haiku, etc.
  dimensions        Int      @default(1536)
  
  createdAt         DateTime @default(now())
  expiresAt         DateTime // Auto-cleanup old embeddings
  lastAccessedAt    DateTime @default(now())
  
  @@unique([contentHash, userId])
  @@index([userId, contentType])
  @@index([expiresAt])
  @@index([lastAccessedAt])
}

model AIMemory {
  id                String   @id @default(cuid())
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  type              String   // preference, fact, pattern, feedback
  category          String   // communication, scheduling, tasks, etc.
  
  content           String   @db.Text
  context           Json     @default("{}")
  
  // Learning metadata
  confidence        Float    @default(0.5) // 0-1
  occurrences       Int      @default(1)
  lastOccurrence    DateTime @default(now())
  
  // Validation
  isVerified        Boolean  @default(false)
  verifiedAt        DateTime?
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  expiresAt         DateTime?
  
  @@index([userId, type])
  @@index([userId, category])
  @@index([confidence])
}

model Notification {
  id                String   @id @default(cuid())
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  type              String   // task_reminder, event_reminder, ai_suggestion, etc.
  priority          String   @default("normal") // low, normal, high, urgent
  
  title             String
  message           String   @db.Text
  
  // Delivery
  channels          String[] // email, push, sms, in-app
  deliveredChannels String[] @default([])
  
  // Status
  isRead            Boolean  @default(false)
  isActioned        Boolean  @default(false)
  
  // Related entities
  relatedType       String?  // task, event, email, etc.
  relatedId         String?
  
  // Actions
  actions           Json     @default("[]") // [{label, action, data}]
  
  // Scheduling
  scheduledFor      DateTime?
  sentAt            DateTime?
  readAt            DateTime?
  
  createdAt         DateTime @default(now())
  expiresAt         DateTime?
  
  @@index([userId, isRead])
  @@index([userId, createdAt])
  @@index([scheduledFor])
}

// Enums
enum Tier {
  PRO     // $50 - 1000 actions
  MAX     // $100 - 3000 actions  
  TEAMS   // $70/user - 2000 actions/user
}

enum Status {
  ACTIVE
  CANCELED
  PAST_DUE
  TRIALING
  PAUSED
}

model Workflow {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name          String
  description   String?
  enabled       Boolean  @default(true)
  metadata      Json     @default("{}")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  executions    WorkflowExecution[]
  triggers      WorkflowTrigger[]
  metrics       WorkflowMetrics[]
  
  @@index([userId])
  @@index([enabled])
}

model WorkflowExecution {
  id                   String   @id @default(cuid())
  workflowId           String
  workflow             Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  userId               String
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  status               String   // 'pending', 'running', 'completed', 'failed'
  startedAt            DateTime @default(now())
  completedAt          DateTime?
  triggerData          Json     @default("{}")
  analysisData         Json     @default("{}")
  selectedSuggestions  String[]
  executedActions      Json     @default("[]")
  result               Json     @default("[]")
  error                Json?
  
  @@index([workflowId])
  @@index([userId])
  @@index([status])
  @@index([startedAt])
}

model WorkflowTrigger {
  id          String   @id @default(cuid())
  workflowId  String?
  workflow    Workflow? @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type        String   // 'time', 'email', 'calendar', 'task', 'webhook'
  config      Json     @default("{}")
  metadata    Json     @default("{}")
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([userId])
  @@index([type])
  @@index([active])
}

model WorkflowMetrics {
  id               String   @id @default(cuid())
  workflowId       String   @unique
  workflow         Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  executionCount   Int      @default(0)
  successRate      Float    @default(0.0)
  avgDuration      Float    @default(0.0)
  lastExecuted     DateTime?
  updatedAt        DateTime @updatedAt
  
  @@index([workflowId])
}

model WorkflowTemplateUsage {
  id           String   @id @default(cuid())
  templateId   String
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  usedAt       DateTime @default(now())
  customizations Json   @default("{}")
  
  @@index([templateId])
  @@index([userId])
}

// PHASE 1.1: Authentication & Security Models
model RefreshToken {
  id           String   @id @default(cuid())
  token        String   @unique
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt    DateTime
  revokedAt    DateTime?
  family       String   // For token rotation
  createdAt    DateTime @default(now())
  
  @@index([userId])
  @@index([expiresAt])
  @@index([family])
}

model AuditLog {
  id           String   @id @default(cuid())
  userId       String?
  user         User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  action       String   // 'CREATE', 'UPDATE', 'DELETE', 'ACCESS'
  resource     String   // Table/entity name
  resourceId   String?  // ID of the affected resource
  success      Boolean  @default(true) // Whether the action succeeded
  oldValues    Json?    // Previous values
  newValues    Json?    // New values
  ipAddress    String?
  userAgent    String?
  timestamp    DateTime @default(now())
  
  @@index([userId])
  @@index([action])
  @@index([resource])
  @@index([timestamp])
}

model ActivityLog {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type         String   // 'login', 'logout', 'task_created', 'email_sent', etc.
  category     String   // 'auth', 'productivity', 'communication', etc.
  description  String
  metadata     Json     @default("{}")
  timestamp    DateTime @default(now())
  
  @@index([userId])
  @@index([type])
  @@index([category])
  @@index([timestamp])
}

// PHASE 1.2: AI/ML Models
model AIUsageLog {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  provider        String   // 'anthropic', 'openai', 'elevenlabs'
  model           String   // 'claude-3-haiku', 'gpt-4', etc.
  action          String   // 'text_generation', 'voice_synthesis', etc.
  inputTokens     Int      @default(0)
  outputTokens    Int      @default(0)
  totalCost       Decimal  @db.Decimal(10, 6)
  duration        Int      // milliseconds
  cacheHit        Boolean  @default(false)
  metadata        Json     @default("{}")
  createdAt       DateTime @default(now())
  
  @@index([userId])
  @@index([provider])
  @@index([model])
  @@index([createdAt])
}

model AISuggestion {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type         String   // 'task', 'email', 'calendar', 'workflow'
  category     String   // 'productivity', 'communication', 'analysis'
  title        String
  description  String
  actionType   String   // Type of action to be performed
  actionData   Json     @default("{}")  // Data needed to execute the action
  status       String   @default("PENDING") // 'PENDING', 'ACCEPTED', 'REJECTED', 'EXECUTED'
  confidence   Float    // 0.0 to 1.0
  priority     String   // 'low', 'medium', 'high', 'urgent'
  suggestedAt  DateTime @default(now())
  acceptedAt   DateTime?
  rejectedAt   DateTime?
  executedAt   DateTime?
  expiresAt    DateTime?  // When the suggestion expires
  metadata     Json     @default("{}")
  
  @@index([userId])
  @@index([type])
  @@index([priority])
  @@index([status])
  @@index([suggestedAt])
}

model VoiceInteraction {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type          String   // 'stt', 'tts', 'voice_command'
  provider      String   // 'elevenlabs', 'openai', 'google'
  inputText     String?
  outputText    String?
  audioFileUrl  String?
  duration      Float?   // seconds
  language      String   @default("en-US")
  voiceId       String?
  speed         Float    @default(1.0)
  pitch         Float    @default(1.0)
  cost          Decimal? @db.Decimal(10, 6)
  metadata      Json     @default("{}")
  createdAt     DateTime @default(now())
  
  @@index([userId])
  @@index([type])
  @@index([provider])
  @@index([createdAt])
}

// PHASE 1.3: Operational Models
model ScheduledJob {
  id            String   @id @default(cuid())
  userId        String?
  user          User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  name          String
  description   String?
  type          String   // 'cron', 'interval', 'delayed', 'recurring'
  schedule      String?  // Cron expression or interval
  payload       Json     @default("{}")
  enabled       Boolean  @default(true)
  retryAttempts Int      @default(3)
  retryDelay    Int      @default(5000) // milliseconds
  timeout       Int      @default(30000) // milliseconds
  lastRun       DateTime?
  nextRun       DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  executions    JobExecution[]
  
  @@index([userId])
  @@index([type])
  @@index([enabled])
  @@index([nextRun])
}

model JobExecution {
  id           String   @id @default(cuid())
  jobId        String
  job          ScheduledJob @relation(fields: [jobId], references: [id], onDelete: Cascade)
  status       String   // 'pending', 'running', 'completed', 'failed', 'cancelled'
  startedAt    DateTime @default(now())
  completedAt  DateTime?
  duration     Int?     // milliseconds
  result       Json?
  error        Json?
  retryCount   Int      @default(0)
  logs         String?  @db.Text
  
  @@index([jobId])
  @@index([status])
  @@index([startedAt])
}

model EmailThread {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  subject         String
  threadId        String   @unique // External thread ID from provider
  provider        String   // 'gmail', 'outlook'
  lastMessageAt   DateTime
  isRead          Boolean  @default(false)
  isImportant     Boolean  @default(false)
  isArchived      Boolean  @default(false)
  labels          String[] // Array of labels/tags
  participants    String[] // Array of email addresses
  messageCount    Int      @default(1)
  metadata        Json     @default("{}")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  emails          Email[]
  
  @@index([userId])
  @@index([threadId])
  @@index([isRead])
  @@index([lastMessageAt])
}

model File {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name         String
  originalName String
  mimeType     String
  size         BigInt   // bytes
  url          String?  // S3/CDN URL
  localPath    String?  // Local file path
  hash         String?  // File hash for deduplication
  metadata     Json     @default("{}")
  uploadedAt   DateTime @default(now())
  
  @@index([userId])
  @@index([mimeType])
  @@index([hash])
  @@index([uploadedAt])
}

// PHASE 1.4: Integration Models
model SyncStatistics {
  id              String   @id @default(cuid())
  integrationId   String
  integration     Integration @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  totalSyncs      Int      @default(0)
  successfulSyncs Int      @default(0)
  failedSyncs     Int      @default(0)
  lastSyncAt      DateTime?
  averageDuration Float?   // Average sync time in milliseconds
  itemsSynced     Int      @default(0)
  errors          Json     @default("[]")
  updatedAt       DateTime @updatedAt
  
  @@unique([integrationId])
  @@index([integrationId])
}

model SyncConflict {
  id            String   @id @default(cuid())
  integrationId String
  integration   Integration @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  resourceType  String   // 'email', 'calendar', 'task', etc.
  resourceId    String   // External resource ID
  conflictType  String   // 'update_conflict', 'delete_conflict', etc.
  localData     Json     // Local version
  remoteData    Json     // Remote version
  resolution    String?  // 'local_wins', 'remote_wins', 'manual', 'merged'
  resolvedAt    DateTime?
  createdAt     DateTime @default(now())
  
  @@index([integrationId])
  @@index([resourceType])
  @@index([conflictType])
}