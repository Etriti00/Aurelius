// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pgvector(map: "vector")]
}

// ===============================
// USER MANAGEMENT
// ===============================

model User {
  id    String @id @default(cuid())
  email String @unique
  name  String?
  avatar String?

  // OAuth providers
  googleId    String? @unique
  microsoftId String? @unique
  appleId     String? @unique

  // Subscription & billing
  subscription     Subscription?
  stripeCustomerId String?       @unique

  // Voice preferences
  voiceId    String? @default("rachel")
  voiceSpeed Float   @default(1.0)

  // Security
  mfaEnabled Boolean @default(false)
  mfaSecret  String? @db.Text

  // Metadata
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  lastActiveAt DateTime?
  preferences  Json      @default("{}")

  // Relations
  integrations     Integration[]
  tasks            Task[]
  emailThreads     EmailThread[]
  calendarEvents   CalendarEvent[]
  embeddings       VectorEmbedding[]
  aiUsage          AIUsageLog[]
  refreshTokens    RefreshToken[]
  suggestions      AISuggestion[]
  voiceInteractions VoiceInteraction[]

  @@index([email])
  @@index([stripeCustomerId])
  @@index([lastActiveAt])
  @@map("users")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique @db.Text
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  revokedAt DateTime?
  family    String?  // For token rotation

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, expiresAt])
  @@index([family])
  @@map("refresh_tokens")
}

// ===============================
// SUBSCRIPTION & BILLING
// ===============================

model Subscription {
  id               String            @id @default(cuid())
  userId           String            @unique
  tier             SubscriptionTier  @default(PRO)
  status           SubscriptionStatus @default(ACTIVE)
  stripeSubscriptionId String?       @unique
  
  // Limits
  aiActionsPerMonth    Int     @default(1000)
  aiActionsUsed        Int     @default(0)
  integrationsAllowed  Int     @default(3)
  
  // Billing
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  cancelAtPeriodEnd    Boolean  @default(false)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, status])
  @@index([stripeSubscriptionId])
  @@map("subscriptions")
}

enum SubscriptionTier {
  PRO
  MAX
  TEAMS
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
  UNPAID
  PAUSED
}

// ===============================
// INTEGRATIONS
// ===============================

model Integration {
  id       String @id @default(cuid())
  userId   String
  provider String // 'google-gmail', 'slack', etc.

  // Encrypted tokens
  accessToken  String    @db.Text
  refreshToken String?   @db.Text
  tokenExpiry  DateTime?

  // Integration status
  status     IntegrationStatus @default(ACTIVE)
  lastSyncAt DateTime?
  syncError  String?

  // Metadata
  settings  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, provider])
  @@index([userId, status])
  @@index([provider, lastSyncAt])
  @@map("integrations")
}

enum IntegrationStatus {
  ACTIVE
  PAUSED
  ERROR
  EXPIRED
}

// ===============================
// TASK MANAGEMENT
// ===============================

model Task {
  id          String     @id @default(cuid())
  userId      String
  title       String
  description String?    @db.Text
  status      TaskStatus @default(TODO)
  priority    TaskPriority @default(MEDIUM)
  
  // Task metadata
  dueDate     DateTime?
  completedAt DateTime?
  tags        String[]
  metadata    Json       @default("{}")
  
  // AI insights
  aiInsights  Json?
  confidence  Float?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, status])
  @@index([userId, dueDate])
  @@index([userId, priority])
  @@map("tasks")
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  COMPLETED
  ARCHIVED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

// ===============================
// EMAIL MANAGEMENT
// ===============================

model EmailThread {
  id         String @id @default(cuid())
  userId     String
  threadId   String // External thread ID
  provider   String // 'gmail', 'outlook'
  
  subject    String
  snippet    String?
  labels     String[]
  isRead     Boolean @default(false)
  isImportant Boolean @default(false)
  
  // AI insights
  summary    String? @db.Text
  priority   EmailPriority @default(NORMAL)
  sentiment  Float?  // -1 to 1
  aiInsights Json?
  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  lastMessageAt DateTime?
  
  messages   EmailMessage[]
  user       User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, threadId, provider])
  @@index([userId, isRead])
  @@index([userId, priority])
  @@map("email_threads")
}

model EmailMessage {
  id         String @id @default(cuid())
  threadId   String
  messageId  String // External message ID
  
  fromEmail  String
  fromName   String?
  toEmails   String[]
  ccEmails   String[]
  bccEmails  String[]
  
  subject    String
  body       String @db.Text
  htmlBody   String? @db.Text
  
  sentAt     DateTime
  createdAt  DateTime @default(now())
  
  thread     EmailThread @relation(fields: [threadId], references: [id], onDelete: Cascade)

  @@unique([threadId, messageId])
  @@index([threadId, sentAt])
  @@map("email_messages")
}

enum EmailPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

// ===============================
// CALENDAR MANAGEMENT
// ===============================

model CalendarEvent {
  id          String @id @default(cuid())
  userId      String
  eventId     String // External event ID
  provider    String // 'google', 'outlook'
  
  title       String
  description String? @db.Text
  location    String?
  
  startTime   DateTime
  endTime     DateTime
  isAllDay    Boolean @default(false)
  
  attendees   Json    @default("[]")
  status      EventStatus @default(CONFIRMED)
  
  // AI insights
  preparation String? @db.Text
  aiInsights  Json?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId, provider])
  @@index([userId, startTime])
  @@index([userId, status])
  @@map("calendar_events")
}

enum EventStatus {
  CONFIRMED
  TENTATIVE
  CANCELLED
}

// ===============================
// AI & VECTOR EMBEDDINGS
// ===============================

model VectorEmbedding {
  id          String @id @default(cuid())
  userId      String
  contentType String // 'email' | 'task' | 'document' | 'voice'
  contentId   String // Reference to original content
  contentHash String // For deduplication
  
  // pgvector - 1536 dimensions for OpenAI embeddings
  embedding   Unsupported("vector(1536)")
  
  // Metadata for filtering
  metadata    Json
  createdAt   DateTime @default(now())
  expiresAt   DateTime // Auto-cleanup old embeddings
  
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([contentHash, userId])
  @@index([userId, contentType])
  @@index([expiresAt])
  @@map("vector_embeddings")
}

model AIUsageLog {
  id           String  @id @default(cuid())
  userId       String
  model        String  // 'claude-3-haiku', etc.
  action       String  // 'email-draft', 'task-analysis', etc.
  
  // Metrics
  inputTokens  Int
  outputTokens Int
  totalCost    Decimal @db.Decimal(10, 6)
  duration     Int     // milliseconds
  
  // Cache info
  cacheHit     Boolean @default(false)
  
  createdAt    DateTime @default(now())
  
  user         User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([model, action])
  @@map("ai_usage_logs")
}

model AISuggestion {
  id          String @id @default(cuid())
  userId      String
  type        SuggestionType
  title       String
  description String @db.Text
  
  // Action data
  actionType  String
  actionData  Json
  
  // Metadata
  confidence  Float
  priority    SuggestionPriority @default(MEDIUM)
  status      SuggestionStatus @default(PENDING)
  
  // Timing
  suggestedAt DateTime @default(now())
  expiresAt   DateTime?
  acceptedAt  DateTime?
  rejectedAt  DateTime?
  
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, status])
  @@index([userId, priority])
  @@index([expiresAt])
  @@map("ai_suggestions")
}

enum SuggestionType {
  TASK_CREATE
  EMAIL_DRAFT
  CALENDAR_BLOCK
  MEETING_PREP
  WORKFLOW_OPTIMIZE
}

enum SuggestionPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum SuggestionStatus {
  PENDING
  ACCEPTED
  REJECTED
  EXPIRED
}

// ===============================
// VOICE INTERACTIONS
// ===============================

model VoiceInteraction {
  id           String @id @default(cuid())
  userId       String
  
  // Audio data
  audioUrl     String?
  transcript   String @db.Text
  
  // Processing
  intent       String?
  confidence   Float?
  
  // Response
  responseText String @db.Text
  responseAudio String?
  
  // Metadata
  duration     Int?    // milliseconds
  language     String  @default("en")
  
  createdAt    DateTime @default(now())
  
  user         User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@map("voice_interactions")
}